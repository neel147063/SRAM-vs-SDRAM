Qflow synthesis logfile created on Sat Nov 30 10:42:40 AM IST 2024
Running yosys for verilog parsing and synthesis
yosys  -s ram32_sdram_3split.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `ram32_sdram_3split.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/neel/ram3/source/ram128.v
Parsing Verilog input from `/home/neel/ram3/source/ram128.v' to AST representation.
Generating RTLIL representation for module `\ram32_sdram_3split'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ram32_sdram_3split

3.1.2. Analyzing design hierarchy..
Top module:  \ram32_sdram_3split
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/neel/ram3/source/ram128.v:30$8 in module ram32_sdram_3split.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~5 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:30$8'.
     1/7: $2$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$21
     2/7: $2$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_DATA[7:0]$20
     3/7: $2$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_ADDR[31:0]$19
     4/7: $1$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$17
     5/7: $1$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_DATA[7:0]$16
     6/7: $1$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_ADDR[31:0]$15
     7/7: $0\dataout[7:0]
Creating decoders for process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:25$6'.
     1/1: $0\column_address[1:0]
Creating decoders for process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:21$4'.
     1/1: $0\row_address[3:0]
Creating decoders for process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:17$2'.
     1/1: $0\vertical_address[3:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ram32_sdram_3split.\dataout' using process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:30$8'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\ram32_sdram_3split.$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_ADDR' using process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:30$8'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\ram32_sdram_3split.$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_DATA' using process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:30$8'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\ram32_sdram_3split.$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN' using process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:30$8'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\ram32_sdram_3split.\column_address' using process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:25$6'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\ram32_sdram_3split.\row_address' using process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:21$4'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\ram32_sdram_3split.\vertical_address' using process `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:17$2'.
  created $dff cell `$procdff$76' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:30$8'.
Removing empty process `ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:30$8'.
Found and cleaned up 1 empty switch in `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:25$6'.
Removing empty process `ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:25$6'.
Found and cleaned up 1 empty switch in `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:21$4'.
Removing empty process `ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:21$4'.
Found and cleaned up 1 empty switch in `\ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:17$2'.
Removing empty process `ram32_sdram_3split.$proc$/home/neel/ram3/source/ram128.v:17$2'.
Cleaned up 5 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.
<suppressed ~7 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.
<suppressed ~8 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 7 unused cells and 38 unused wires.
<suppressed ~8 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module ram32_sdram_3split...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$35.
    dead port 2/2 on $mux $procmux$41.
    dead port 2/2 on $mux $procmux$47.
Removed 3 multiplexer ports.
<suppressed ~7 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
    Consolidated identical input bits for $mux cell $procmux$33:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$33_Y
      New ports: A=1'0, B=1'1, Y=$procmux$33_Y [0]
      New connections: $procmux$33_Y [7:1] = { $procmux$33_Y [0] $procmux$33_Y [0] $procmux$33_Y [0] $procmux$33_Y [0] $procmux$33_Y [0] $procmux$33_Y [0] $procmux$33_Y [0] }
  Optimizing cells in module \ram32_sdram_3split.
    Consolidated identical input bits for $mux cell $procmux$50:
      Old ports: A=8'00000000, B=$2$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$21, Y=$0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11
      New ports: A=1'0, B=$procmux$33_Y [0], Y=$0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0]
      New connections: $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [7:1] = { $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0] $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0] $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0] $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0] $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0] $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0] $0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_EN[7:0]$11 [0] }
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$76 ($dff) from module ram32_sdram_3split (D = { 2'00 \address [4:3] }, Q = \vertical_address).
Adding EN signal on $procdff$75 ($dff) from module ram32_sdram_3split (D = { 2'00 \address [2:1] }, Q = \row_address).
Adding EN signal on $procdff$74 ($dff) from module ram32_sdram_3split (D = { 1'0 \address [0] }, Q = \column_address).
Adding SRST signal on $procdff$70 ($dff) from module ram32_sdram_3split (D = $procmux$60_Y, Q = \dataout, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$81 ($sdff) from module ram32_sdram_3split (D = $memrd$\Mem$/home/neel/ram3/source/ram128.v:33$22_DATA, Q = \dataout).
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$80 ($dffe) from module ram32_sdram_3split.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$79 ($dffe) from module ram32_sdram_3split.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$79 ($dffe) from module ram32_sdram_3split.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$78 ($dffe) from module ram32_sdram_3split.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$78 ($dffe) from module ram32_sdram_3split.

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 27 address bits (of 32) from memory init port ram32_sdram_3split.$auto$proc_memwr.cc:45:proc_memwr$77 (Mem).
Removed top 27 address bits (of 32) from memory read port ram32_sdram_3split.$memrd$\Mem$/home/neel/ram3/source/ram128.v:33$22 (Mem).
Removed top 28 bits (of 32) from port A of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$24 ($add).
Removed top 1 bits (of 2) from port B of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$24 ($add).
Removed top 27 bits (of 32) from port Y of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$24 ($add).
Removed top 26 bits (of 32) from port A of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$26 ($add).
Removed top 2 bits (of 4) from port B of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$26 ($add).
Removed top 25 bits (of 32) from port Y of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$26 ($add).
Removed top 27 bits (of 32) from mux cell ram32_sdram_3split.$procmux$56 ($mux).
Removed top 27 bits (of 32) from mux cell ram32_sdram_3split.$procmux$45 ($mux).
Removed top 2 bits (of 7) from port Y of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$26 ($add).
Removed top 1 bits (of 6) from port A of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$26 ($add).
Removed top 1 bits (of 5) from port Y of cell ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$24 ($add).
Removed top 27 bits (of 32) from wire ram32_sdram_3split.$0$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_ADDR[31:0]$9.
Removed top 27 bits (of 32) from wire ram32_sdram_3split.$2$memwr$\Mem$/home/neel/ram3/source/ram128.v:36$1_ADDR[31:0]$19.
Removed top 28 bits (of 32) from wire ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$24_Y.
Removed top 27 bits (of 32) from wire ram32_sdram_3split.$add$/home/neel/ram3/source/ram128.v:0$26_Y.
Removed top 6 bits (of 8) from wire ram32_sdram_3split.$memrd$\Mem$/home/neel/ram3/source/ram128.v:33$22_DATA.
Removed top 1 bits (of 2) from wire ram32_sdram_3split.column_address.
Removed top 2 bits (of 4) from wire ram32_sdram_3split.row_address.
Removed top 2 bits (of 4) from wire ram32_sdram_3split.vertical_address.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ram32_sdram_3split:
  creating $macc model for $add$/home/neel/ram3/source/ram128.v:0$24 ($add).
  creating $macc model for $add$/home/neel/ram3/source/ram128.v:0$26 ($add).
  creating $alu model for $macc $add$/home/neel/ram3/source/ram128.v:0$26.
  creating $alu model for $macc $add$/home/neel/ram3/source/ram128.v:0$24.
  creating $alu cell for $add$/home/neel/ram3/source/ram128.v:0$24: $auto$alumacc.cc:485:replace_alu$94
  creating $alu cell for $add$/home/neel/ram3/source/ram128.v:0$26: $auto$alumacc.cc:485:replace_alu$97
  created 2 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing ram32_sdram_3split.Mem write port 0.

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\Mem'[0] in module `\ram32_sdram_3split': merging output FF to cell.
    Write port 0: don't care on collision.

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 1 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.
<suppressed ~19 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \Mem in module \ram32_sdram_3split:
  created 32 $dff cells and 0 static cells of width 8.
Extracted data FF from read port 0 of ram32_sdram_3split.Mem: $\Mem$rdreg[0]
  read interface: 1 $dff and 31 $mux cells.
  write interface: 32 write mux blocks.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.
<suppressed ~13 debug messages>

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 2 unused cells and 72 unused wires.
<suppressed ~3 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\Mem[9]$137 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[9]).
Adding EN signal on $memory\Mem[8]$135 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[8]).
Adding EN signal on $memory\Mem[7]$133 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[7]).
Adding EN signal on $memory\Mem[6]$131 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[6]).
Adding EN signal on $memory\Mem[5]$129 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[5]).
Adding EN signal on $memory\Mem[4]$127 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[4]).
Adding EN signal on $memory\Mem[3]$125 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[3]).
Adding EN signal on $memory\Mem[31]$181 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[31]).
Adding EN signal on $memory\Mem[30]$179 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[30]).
Adding EN signal on $memory\Mem[2]$123 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[2]).
Adding EN signal on $memory\Mem[29]$177 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[29]).
Adding EN signal on $memory\Mem[28]$175 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[28]).
Adding EN signal on $memory\Mem[27]$173 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[27]).
Adding EN signal on $memory\Mem[26]$171 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[26]).
Adding EN signal on $memory\Mem[25]$169 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[25]).
Adding EN signal on $memory\Mem[24]$167 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[24]).
Adding EN signal on $memory\Mem[23]$165 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[23]).
Adding EN signal on $memory\Mem[22]$163 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[22]).
Adding EN signal on $memory\Mem[21]$161 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[21]).
Adding EN signal on $memory\Mem[20]$159 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[20]).
Adding EN signal on $memory\Mem[1]$121 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[1]).
Adding EN signal on $memory\Mem[19]$157 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[19]).
Adding EN signal on $memory\Mem[18]$155 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[18]).
Adding EN signal on $memory\Mem[17]$153 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[17]).
Adding EN signal on $memory\Mem[16]$151 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[16]).
Adding EN signal on $memory\Mem[15]$149 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[15]).
Adding EN signal on $memory\Mem[14]$147 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[14]).
Adding EN signal on $memory\Mem[13]$145 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[13]).
Adding EN signal on $memory\Mem[12]$143 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[12]).
Adding EN signal on $memory\Mem[11]$141 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[11]).
Adding EN signal on $memory\Mem[10]$139 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[10]).
Adding EN signal on $memory\Mem[0]$119 ($dff) from module ram32_sdram_3split (D = \datain, Q = \Mem[0]).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $and.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~368 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.
<suppressed ~12 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 1 unused cells and 29 unused wires.
<suppressed ~2 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\ram32_sdram_3split' to `<abc-temp-dir>/input.blif'..
Extracted 339 gates and 605 wires to a netlist network with 266 inputs and 41 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               MUX cells:      248
ABC RESULTS:               XOR cells:        1
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               AND cells:        4
ABC RESULTS:               NOT cells:        3
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              NAND cells:        3
ABC RESULTS:                OR cells:       44
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:        internal signals:      298
ABC RESULTS:           input signals:      266
ABC RESULTS:          output signals:       41
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.
<suppressed ~24 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..
Removed 2 unused cells and 397 unused wires.
<suppressed ~3 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \ram32_sdram_3split

3.24.2. Analyzing design hierarchy..
Top module:  \ram32_sdram_3split
Removed 0 unused modules.

3.25. Printing statistics.

=== ram32_sdram_3split ===

   Number of wires:                374
   Number of wire bits:            625
   Number of public wires:          44
   Number of public wire bits:     288
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                606
     $_ANDNOT_                      32
     $_AND_                          4
     $_DFFE_PN_                      5
     $_DFFE_PP_                    256
     $_MUX_                        248
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                          44
     $_SDFFE_PN0N_                   8
     $_XNOR_                         1
     $_XOR_                          1

3.26. Executing CHECK pass (checking for obvious problems).
Checking module ram32_sdram_3split...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ram32_sdram_3split':
  mapped 269 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\ram32_sdram_3split' to `<abc-temp-dir>/input.blif'..
Extracted 614 gates and 902 wires to a netlist network with 287 inputs and 269 outputs.

6.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            NOR2X1 cells:       20
ABC RESULTS:             OR2X2 cells:        4
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:            MUX2X1 cells:       80
ABC RESULTS:           NAND3X1 cells:       31
ABC RESULTS:             INVX1 cells:       80
ABC RESULTS:           OAI22X1 cells:       14
ABC RESULTS:           NAND2X1 cells:      220
ABC RESULTS:           OAI21X1 cells:      307
ABC RESULTS:           AOI21X1 cells:       27
ABC RESULTS:             BUFX2 cells:       64
ABC RESULTS:        internal signals:      346
ABC RESULTS:           input signals:      287
ABC RESULTS:          output signals:      269
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 128 unused cells and 966 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port ram32_sdram_3split.address: Missing option -inpad.
Don't map input port ram32_sdram_3split.cas: Missing option -inpad.
Don't map input port ram32_sdram_3split.clk: Missing option -inpad.
Don't map input port ram32_sdram_3split.datain: Missing option -inpad.
Mapping port ram32_sdram_3split.dataout using BUFX2.
Don't map input port ram32_sdram_3split.en: Missing option -inpad.
Don't map input port ram32_sdram_3split.ras: Missing option -inpad.
Don't map input port ram32_sdram_3split.rw: Missing option -inpad.
Don't map input port ram32_sdram_3split.vas: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sdram_3split..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sdram_3split.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sdram_3split'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sdram_3split..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sdram_3split.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== ram32_sdram_3split ===

   Number of wires:                822
   Number of wire bits:           1017
   Number of public wires:         822
   Number of public wire bits:    1017
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                998
     AOI21X1                        27
     AOI22X1                         2
     BUFX2                           8
     DFFPOSX1                      205
     INVX1                          80
     MUX2X1                         80
     NAND2X1                       220
     NAND3X1                        31
     NOR2X1                         20
     OAI21X1                       307
     OAI22X1                        14
     OR2X2                           4

End of script. Logfile hash: 9be7356e42, CPU: user 0.29s system 0.01s, MEM: 15.00 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 53% 2x abc (0 sec), 14% 23x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl ram32_sdram_3split_mapped.blif ram32_sdram_3split /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I ram32_sdram_3split_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif ram32_sdram_3split.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 99 (load 1882.76) from node vertical_address[0],
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 14.8928 (latency = 1489.28 ps)
Top input node fanout is 205 (load 5724.32) from node clk.
Warning 1: load of 283.544 is 4.92105 times greater than strongest gate NAND3X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 261: load of 1892.76 is 14.9719 times greater than strongest gate DFFPOSX1
331 gates exceed specified minimum load.
86 buffers were added.
24 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 986    	Out: 962    	-24
	"2" gates	In: 12    	Out: 15    	+3

Number of gates changed: 110
gates resized: 110
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 708.297) from node _612_,
driven by NAND3X1 with strength 57.6186 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.52168 (latency = 552.168 ps)
Top input node fanout is 14 (load 523.478) from node clk.
Warning 1: load of 718.297 is 3.10125 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 24: load of 283.544 is 4.92105 times greater than strongest gate NAND3X1
Warning 330: load of 311.182 is 5.32854 times greater than strongest gate NAND2X1
Warning 333: load of 332.462 is 5.69292 times greater than strongest gate NAND2X1
353 gates exceed specified minimum load.
0 buffers were added.
75 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 976    	Out: 976    	+0
	"2" gates	In: 87    	Out: 14    	-73
	"4" gates	In: 11    	Out: 82    	+71
	"8" gates	In: 10    	Out: 12    	+2

Number of gates changed: 75
gates resized: 75
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 708.297) from node _612_,
driven by NAND3X1 with strength 57.6186 (fF driven at latency 100)
Top fanout load-to-strength ratio is 5.52168 (latency = 552.168 ps)
Top input node fanout is 14 (load 523.478) from node clk.
Warning 1: load of 307.496 is 1.36672 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 308.354 is 1.37053 times greater than strongest gate BUFX4
Warning 6: load of 312.691 is 1.38981 times greater than strongest gate BUFX4
Warning 9: load of 319.048 is 1.41806 times greater than strongest gate BUFX4
Warning 10: load of 320.623 is 1.42506 times greater than strongest gate BUFX4
Warning 11: load of 325.042 is 1.4447 times greater than strongest gate BUFX4
Warning 15: load of 718.297 is 3.10125 times greater than strongest gate CLKBUF1
Warning 87: load of 283.544 is 4.92105 times greater than strongest gate NAND3X1
Warning 394: load of 311.182 is 5.32854 times greater than strongest gate NAND2X1
Warning 397: load of 332.462 is 5.69292 times greater than strongest gate NAND2X1
417 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 976    	Out: 976    	+0
	"2" gates	In: 14    	Out: 14    	+0
	"4" gates	In: 82    	Out: 82    	+0
	"8" gates	In: 12    	Out: 12    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/neel/ram3/synthesis
Files:
   Verilog: /home/neel/ram3/synthesis/ram32_sdram_3split.rtl.v
   Verilog: /home/neel/ram3/synthesis/ram32_sdram_3split.rtlnopwr.v
   Verilog: /home/neel/ram3/synthesis/ram32_sdram_3split.rtlbb.v
   Spice:   /home/neel/ram3/synthesis/ram32_sdram_3split.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f ram32_sdram_3split.spc ram32_sdram_3split.xspice

Synthesis script ended on Sat Nov 30 10:42:40 AM IST 2024
