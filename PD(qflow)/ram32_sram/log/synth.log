Qflow synthesis logfile created on Sat Nov 30 10:31:23 AM IST 2024
Running yosys for verilog parsing and synthesis
yosys  -s ram32_sram.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `ram32_sram.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/neel/ram2/source/ram128.v
Parsing Verilog input from `/home/neel/ram2/source/ram128.v' to AST representation.
Generating RTLIL representation for module `\ram32_sram'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ram32_sram

3.1.2. Analyzing design hierarchy..
Top module:  \ram32_sram
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/neel/ram2/source/ram128.v:13$2 in module ram32_sram.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ram32_sram.$proc$/home/neel/ram2/source/ram128.v:13$2'.
     1/7: $2$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$12
     2/7: $2$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_DATA[7:0]$11
     3/7: $2$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_ADDR[4:0]$10
     4/7: $1$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$8
     5/7: $1$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_DATA[7:0]$7
     6/7: $1$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_ADDR[4:0]$6
     7/7: $0\dataout[7:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ram32_sram.\dataout' using process `\ram32_sram.$proc$/home/neel/ram2/source/ram128.v:13$2'.
  created $dff cell `$procdff$47' with positive edge clock.
Creating register for signal `\ram32_sram.$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_ADDR' using process `\ram32_sram.$proc$/home/neel/ram2/source/ram128.v:13$2'.
  created $dff cell `$procdff$48' with positive edge clock.
Creating register for signal `\ram32_sram.$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_DATA' using process `\ram32_sram.$proc$/home/neel/ram2/source/ram128.v:13$2'.
  created $dff cell `$procdff$49' with positive edge clock.
Creating register for signal `\ram32_sram.$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN' using process `\ram32_sram.$proc$/home/neel/ram2/source/ram128.v:13$2'.
  created $dff cell `$procdff$50' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\ram32_sram.$proc$/home/neel/ram2/source/ram128.v:13$2'.
Removing empty process `ram32_sram.$proc$/home/neel/ram2/source/ram128.v:13$2'.
Cleaned up 2 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.
<suppressed ~4 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 4 unused cells and 25 unused wires.
<suppressed ~5 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module ram32_sram...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$18.
    dead port 2/2 on $mux $procmux$24.
    dead port 2/2 on $mux $procmux$30.
Removed 3 multiplexer ports.
<suppressed ~4 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
    Consolidated identical input bits for $mux cell $procmux$16:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$16_Y
      New ports: A=1'0, B=1'1, Y=$procmux$16_Y [0]
      New connections: $procmux$16_Y [7:1] = { $procmux$16_Y [0] $procmux$16_Y [0] $procmux$16_Y [0] $procmux$16_Y [0] $procmux$16_Y [0] $procmux$16_Y [0] $procmux$16_Y [0] }
  Optimizing cells in module \ram32_sram.
    Consolidated identical input bits for $mux cell $procmux$33:
      Old ports: A=8'00000000, B=$2$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$12, Y=$0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5
      New ports: A=1'0, B=$procmux$16_Y [0], Y=$0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0]
      New connections: $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [7:1] = { $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0] $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0] $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0] $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0] $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0] $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0] $0$memwr$\Mem$/home/neel/ram2/source/ram128.v:19$1_EN[7:0]$5 [0] }
  Optimizing cells in module \ram32_sram.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$47 ($dff) from module ram32_sram (D = $procmux$43_Y, Q = \dataout, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$52 ($sdff) from module ram32_sram (D = $memrd$\Mem$/home/neel/ram2/source/ram128.v:16$13_DATA, Q = \dataout).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ram32_sram:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing ram32_sram.Mem write port 0.

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\Mem'[0] in module `\ram32_sram': merging output FF to cell.
    Write port 0: don't care on collision.

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 1 unused cells and 9 unused wires.
<suppressed ~2 debug messages>

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.
<suppressed ~6 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \Mem in module \ram32_sram:
  created 32 $dff cells and 0 static cells of width 8.
Extracted data FF from read port 0 of ram32_sram.Mem: $\Mem$rdreg[0]
  read interface: 1 $dff and 31 $mux cells.
  write interface: 32 write mux blocks.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.
<suppressed ~13 debug messages>

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 2 unused cells and 72 unused wires.
<suppressed ~3 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\Mem[9]$85 ($dff) from module ram32_sram (D = \datain, Q = \Mem[9]).
Adding EN signal on $memory\Mem[8]$83 ($dff) from module ram32_sram (D = \datain, Q = \Mem[8]).
Adding EN signal on $memory\Mem[7]$81 ($dff) from module ram32_sram (D = \datain, Q = \Mem[7]).
Adding EN signal on $memory\Mem[6]$79 ($dff) from module ram32_sram (D = \datain, Q = \Mem[6]).
Adding EN signal on $memory\Mem[5]$77 ($dff) from module ram32_sram (D = \datain, Q = \Mem[5]).
Adding EN signal on $memory\Mem[4]$75 ($dff) from module ram32_sram (D = \datain, Q = \Mem[4]).
Adding EN signal on $memory\Mem[3]$73 ($dff) from module ram32_sram (D = \datain, Q = \Mem[3]).
Adding EN signal on $memory\Mem[31]$129 ($dff) from module ram32_sram (D = \datain, Q = \Mem[31]).
Adding EN signal on $memory\Mem[30]$127 ($dff) from module ram32_sram (D = \datain, Q = \Mem[30]).
Adding EN signal on $memory\Mem[2]$71 ($dff) from module ram32_sram (D = \datain, Q = \Mem[2]).
Adding EN signal on $memory\Mem[29]$125 ($dff) from module ram32_sram (D = \datain, Q = \Mem[29]).
Adding EN signal on $memory\Mem[28]$123 ($dff) from module ram32_sram (D = \datain, Q = \Mem[28]).
Adding EN signal on $memory\Mem[27]$121 ($dff) from module ram32_sram (D = \datain, Q = \Mem[27]).
Adding EN signal on $memory\Mem[26]$119 ($dff) from module ram32_sram (D = \datain, Q = \Mem[26]).
Adding EN signal on $memory\Mem[25]$117 ($dff) from module ram32_sram (D = \datain, Q = \Mem[25]).
Adding EN signal on $memory\Mem[24]$115 ($dff) from module ram32_sram (D = \datain, Q = \Mem[24]).
Adding EN signal on $memory\Mem[23]$113 ($dff) from module ram32_sram (D = \datain, Q = \Mem[23]).
Adding EN signal on $memory\Mem[22]$111 ($dff) from module ram32_sram (D = \datain, Q = \Mem[22]).
Adding EN signal on $memory\Mem[21]$109 ($dff) from module ram32_sram (D = \datain, Q = \Mem[21]).
Adding EN signal on $memory\Mem[20]$107 ($dff) from module ram32_sram (D = \datain, Q = \Mem[20]).
Adding EN signal on $memory\Mem[1]$69 ($dff) from module ram32_sram (D = \datain, Q = \Mem[1]).
Adding EN signal on $memory\Mem[19]$105 ($dff) from module ram32_sram (D = \datain, Q = \Mem[19]).
Adding EN signal on $memory\Mem[18]$103 ($dff) from module ram32_sram (D = \datain, Q = \Mem[18]).
Adding EN signal on $memory\Mem[17]$101 ($dff) from module ram32_sram (D = \datain, Q = \Mem[17]).
Adding EN signal on $memory\Mem[16]$99 ($dff) from module ram32_sram (D = \datain, Q = \Mem[16]).
Adding EN signal on $memory\Mem[15]$97 ($dff) from module ram32_sram (D = \datain, Q = \Mem[15]).
Adding EN signal on $memory\Mem[14]$95 ($dff) from module ram32_sram (D = \datain, Q = \Mem[14]).
Adding EN signal on $memory\Mem[13]$93 ($dff) from module ram32_sram (D = \datain, Q = \Mem[13]).
Adding EN signal on $memory\Mem[12]$91 ($dff) from module ram32_sram (D = \datain, Q = \Mem[12]).
Adding EN signal on $memory\Mem[11]$89 ($dff) from module ram32_sram (D = \datain, Q = \Mem[11]).
Adding EN signal on $memory\Mem[10]$87 ($dff) from module ram32_sram (D = \datain, Q = \Mem[10]).
Adding EN signal on $memory\Mem[0]$67 ($dff) from module ram32_sram (D = \datain, Q = \Mem[0]).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~223 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\ram32_sram' to `<abc-temp-dir>/input.blif'..
Extracted 334 gates and 597 wires to a netlist network with 263 inputs and 40 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               MUX cells:      248
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:       42
ABC RESULTS:            ANDNOT cells:       32
ABC RESULTS:        internal signals:      294
ABC RESULTS:           input signals:      263
ABC RESULTS:          output signals:       40
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.
<suppressed ~120 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..
Removed 3 unused cells and 390 unused wires.
<suppressed ~4 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \ram32_sram

3.24.2. Analyzing design hierarchy..
Top module:  \ram32_sram
Removed 0 unused modules.

3.25. Printing statistics.

=== ram32_sram ===

   Number of wires:                361
   Number of wire bits:            610
   Number of public wires:          38
   Number of public wire bits:     280
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                594
     $_ANDNOT_                      32
     $_AND_                          1
     $_DFFE_PP_                    256
     $_MUX_                        248
     $_NAND_                         2
     $_NOT_                          1
     $_ORNOT_                        4
     $_OR_                          42
     $_SDFFE_PN0N_                   8

3.26. Executing CHECK pass (checking for obvious problems).
Checking module ram32_sram...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ram32_sram':
  mapped 264 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\ram32_sram' to `<abc-temp-dir>/input.blif'..
Extracted 602 gates and 882 wires to a netlist network with 279 inputs and 264 outputs.

6.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.48 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:            NOR2X1 cells:       43
ABC RESULTS:             INVX1 cells:       16
ABC RESULTS:            MUX2X1 cells:      192
ABC RESULTS:           AOI22X1 cells:       32
ABC RESULTS:           NAND2X1 cells:      285
ABC RESULTS:           OAI21X1 cells:      232
ABC RESULTS:           AOI21X1 cells:       40
ABC RESULTS:        internal signals:      339
ABC RESULTS:           input signals:      279
ABC RESULTS:          output signals:      264
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 874 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port ram32_sram.address: Missing option -inpad.
Don't map input port ram32_sram.clk: Missing option -inpad.
Don't map input port ram32_sram.datain: Missing option -inpad.
Mapping port ram32_sram.dataout using BUFX2.
Don't map input port ram32_sram.enable: Missing option -inpad.
Don't map input port ram32_sram.r_w: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ram32_sram..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ram32_sram.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ram32_sram'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ram32_sram..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ram32_sram.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== ram32_sram ===

   Number of wires:                884
   Number of wire bits:           1133
   Number of public wires:         884
   Number of public wire bits:    1133
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1117
     AND2X2                          4
     AOI21X1                        40
     AOI22X1                        32
     BUFX2                           8
     DFFPOSX1                      264
     INVX1                          16
     MUX2X1                        192
     NAND2X1                       285
     NOR2X1                         43
     OAI21X1                       232
     OR2X2                           1

End of script. Logfile hash: 315886306b, CPU: user 0.25s system 0.01s, MEM: 15.38 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 56% 2x abc (0 sec), 12% 21x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl ram32_sram_mapped.blif ram32_sram /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I ram32_sram_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif ram32_sram.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 32 (load 572.187) from node _609_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 9.76179 (latency = 976.179 ps)
Top input node fanout is 264 (load 7371.8) from node clk.
Warning 1: load of 132.26 is 2.27281 times greater than strongest gate NOR2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 280.601 is 4.80488 times greater than strongest gate NAND2X1
508 gates exceed specified minimum load.
75 buffers were added.
12 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 1104    	Out: 1092    	-12
	"2" gates	In: 13    	Out: 14    	+1

Number of gates changed: 87
gates resized: 87
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 17 (load 764.144) from node clk_bF$buf15,
driven by CLKBUF1 with strength 231.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.63364 (latency = 463.364 ps)
Top input node fanout is 16 (load 598.261) from node clk.
Warning 1: load of 266.553 is 1.18474 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 3: load of 266.957 is 1.18654 times greater than strongest gate BUFX4
Warning 9: load of 774.144 is 3.34237 times greater than strongest gate CLKBUF1
Warning 37: load of 280.601 is 4.80488 times greater than strongest gate NAND2X1
536 gates exceed specified minimum load.
32 buffers were added.
60 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 1108    	Out: 1108    	+0
	"2" gates	In: 73    	Out: 14    	-59
	"4" gates	In: 3    	Out: 61    	+58
	"8" gates	In: 8    	Out: 9    	+1

Number of gates changed: 92
gates resized: 92
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 736.221) from node _782_,
driven by NAND2X1 with strength 58.3992 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.63364 (latency = 463.364 ps)
Top input node fanout is 16 (load 598.261) from node clk.
Warning 1: load of 439.062 is 1.89565 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 46: load of 449.01 is 1.9386 times greater than strongest gate CLKBUF1
Warning 54: load of 746.221 is 3.22181 times greater than strongest gate CLKBUF1
Warning 109: load of 280.601 is 4.80488 times greater than strongest gate NAND2X1
608 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 1140    	Out: 1140    	+0
	"2" gates	In: 14    	Out: 14    	+0
	"4" gates	In: 61    	Out: 61    	+0
	"8" gates	In: 9    	Out: 9    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/neel/ram2/synthesis
Files:
   Verilog: /home/neel/ram2/synthesis/ram32_sram.rtl.v
   Verilog: /home/neel/ram2/synthesis/ram32_sram.rtlnopwr.v
   Verilog: /home/neel/ram2/synthesis/ram32_sram.rtlbb.v
   Spice:   /home/neel/ram2/synthesis/ram32_sram.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f ram32_sram.spc ram32_sram.xspice

Synthesis script ended on Sat Nov 30 10:31:24 AM IST 2024
